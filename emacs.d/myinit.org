#+STARTIP: overview
Emacs configurations

* Appearance
  Appearance configuration tweaks
  #+BEGIN_SRC emacs-lisp
    ;; Font
    (set-default-font "SF Mono")

    ;; Prevent startup screen from showing
    (setq inhibit-startup-message t)

    ;; Hide toolbar
    (tool-bar-mode -1)

    ;; Hide Menu Bar
    (menu-bar-mode -1)

    ;; Replace yes and no for y and n
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Reload buffer
    (global-set-key (kbd "<f5>") 'revert-buffer)

    ;; Line numbers on the margin
    (global-linum-mode 1)

    ;; Hide Scroll Bar
    (toggle-scroll-bar 1)

    ;; Prevent backup files from being created
    (setq make-backup-files nil)

  #+END_SRC

* Chords
#+BEGIN_SRC emacs-lisp
   (use-package use-package-chords
	  :ensure t
	  :config
	  (key-chord-mode 1))
#+END_SRC
* AutoUpdate
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
  ;; Show parent Parentheses
  (show-paren-mode 1)

  ;;Enable copypasting outside of emacs
  (setq x-select-enable-clipboard t)

  ;;Disable autocreation of backup files
  (setq ring-bell-function 'ignore)

  ;;Identation
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)

  ;;Enable prettify symbols mode
  (global-prettify-symbols-mode t)

  ;;Enable bracket pair-matching
  (setq electric-pair-pairs '(
				  (?\{ . ?\})
				  (?\( . ?\))
				  (?\[ . ?\])
				  (?\" . ?\")
						  ))
  (electric-pair-mode t)

  ;;Transform yes-or-no questions into y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;;Easier resize bindings
  ;; Super - Control - <arrow>
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)

  ;;Defer loading most packages for quicker startup
  ;;(setq use-package-always-defer t)

  ;;Remove spaces at end of line on save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* Try Package
  It allows to try a package without the need to install it. For more
  information visit: [[https://github.com/larstvei/Try/tree/271b0a362cadf44d0694628b9e213f54516ef913][Github]]
 #+BEGIN_SRC emacs-lisp

(use-package try
  :ensure t)

 #+END_SRC

* Which Key Package
  It enables a little buffer at the bottom of the screen that shows a
  menu for the possible actions to do when enter an incomplete
  command.

#+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :config (which-key-mode))

#+END_SRC

* Autocompletition
  Enables autocomplete on file and buffer selection.
#+BEGIN_SRC emacs-lisp

(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC

* Swiper Package
** Counsel
   Dependency for swiper
   #+BEGIN_SRC emacs-lisp

(use-package counsel
  :ensure t)

   #+END_SRC
** Swiper
   Enables an easy search and navigation files packages.
   #+BEGIN_SRC emacs-lisp

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))

   #+END_SRC

* Autocomplete Package
  Enable auto-complete package.
  #+BEGIN_SRC emacs-lisp

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))

  #+END_SRC
* Theme
  Define Moe theme
  #+BEGIN_SRC emacs-lisp

(use-package moe-theme
  :ensure t)

  #+END_SRC
* Better Buffer
  Enables a better window selecting buffers
  #+BEGIN_SRC emacs-lisp

(defalias 'list-buffers 'ibuffer)

  #+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
* Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t)
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
#+END_SRC
* Misc
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (use-package iedit
      :ensure t)
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode))
 (setq projectile-completion-system 'ivy)
  #+END_SRC
* PDF tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config)
    (use-package org-pdfview
      :ensure t)

  #+END_SRC
* Origami
  #+BEGIN_SRC emacs-lisp
    (use-package origami
      :ensure t
      :config
      (progn
	(global-origami-mode)
	(global-set-key (kbd "C-c C-t") 'origami-toggle-node)
       ))
  #+END_SRC
* Smart Tab

  #+BEGIN_SRC emacs-lisp
    (use-package smart-tabs-mode
      :ensure t)
  #+END_SRC
* Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    )

  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.xml?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))

  (add-hook 'web-mode-hook  'emmet-mode)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))

  (setq projectile-keymap-prefix (kbd "C-c p"))
#+END_SRC
* JDEE
#+BEGIN_SRC emacs-lisp
  (use-package jdee
    :ensure t
    )
#+END_SRC
* Switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shorcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish
    :config
    (add-hook 'after-init-hook 'global-company-mode))
(setq company-idle-delay t)
#+END_SRC
* C & C++
** Irony
#+BEGIN_SRC emacs-lisp
(use-package irony
    :ensure t
    :hook (c-mode . irony-mode))
(use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
	:config
	(add-hook 'org-mode-hook 'org-indent-mode)
	(add-hook 'org-mode-hook
			  '(lambda ()
				 (visual-line-mode 1))))

  (use-package org-indent
	:diminish org-indent-mode)

  (use-package htmlize
	:ensure t)
#+END_SRC

* Powerline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t)
  (use-package powerline
      :ensure t
      :init
      (spaceline-spacemacs-theme)
      :hook
      ('after-init-hook) . 'powerline-reset)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
      (yas-global-mode)
      (global-set-key (kbd "M-/") 'company-yasnippet))
#+END_SRC
* Crux
#+BEGIN_SRC emacs-lisp
   (use-package crux
	  :ensure t
	  :bind (("C-a" . crux-move-beginning-of-line)))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
   (use-package avy
	  :ensure t
	  :chords (("jj" . avy-goto-char-2)
			   ("jl" . avy-goto-line)))
#+END_SRC
* Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
 (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* Aggressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
      :ensure t)
#+END_SRC
* Dump jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
    :ensure t
    :diminish dumb-jump-mode
    :bind (("C-M-g" . dumb-jump-go)
           ("C-M-p" . dumb-jump-back)
           ("C-M-q" . dumb-jump-quick-look)))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC
